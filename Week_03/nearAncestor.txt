给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。

百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”

例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]



----------
后续遍历

参考思路
若root中只包含p则返回p
若root中只包含q则返回q
若root中不包含p也不包含q则返回NULL
若root中同时包含p和q，则返回root（此时root为最近公共祖先


# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def nearAncestor(self, root, p, q):
        if not root or root == p or root == q:
            return root
        left = self.nearAncestor(root.left, p, q)
        right = self.nearAncestor(root.right, p, q)

        if not left:
            return right
        if not right:
            return left
        return root
