方法一:递归
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def _middleReaversal(self,res,root):
        if not root:
            return []
        self._middleReaversal(res,root.left)
        res.append(root.val)
        self._middleReaversal(res,root.right)
        
    def middleTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        res=[]
        self._middleReaversal(res,root)
        return res

方法二.堆栈
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def middleTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        stack=[]
        res=[]
        node=root
        while node or stack:
            while node:
                stack.append(node)
                node=node.left            
            node=stack.pop()
            res.append(node.val)
            node=node.right
        return res